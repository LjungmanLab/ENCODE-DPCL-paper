#!/bin/bash


### activate conda environment

eval "$(conda shell.bash hook)"
conda activate $CONDA_ENV


### create output directory

mkdir -p $OUT_DIR


### Run workflow

echo "-------------------------------"
echo 


if [[ $SEG_SUFFIX == *".bgz" ]]; then
	echo "Unzipping .bgz file..."
	NEW_SUFFIX=${SEG_SUFFIX::-4}
	gunzip -c $WORKING_DIR/$SAMPLE.$SEG_SUFFIX > $WORKING_DIR/$SAMPLE.$NEW_SUFFIX
	SEGMENTS_FILE=$WORKING_DIR/$SAMPLE.$NEW_SUFFIX
else
	SEGMENTS_FILE=$WORKING_DIR/$SAMPLE.$SEG_SUFFIX
fi

echo "Segments file: $SEGMENTS_FILE"


echo 
echo "-------------------------------"
echo 


echo "Fusing adjacent segments with decreasing HMM scores..."
# Run the python script that performs merging of consecutive segments with progressively decreasing HMM score. Input must be
# an unzipped segments.actual_RPKM.bed file as generated by the bruseq pipeline. Output will be a fused_dec.bed file that matches the naming
# convention of the original segments file (defined in python main func). More information can be found within the python script.

conda run -p $CONDA_ENV python $ACTIONS_DIR/merge_decreasing_segments_v8.py $SEGMENTS_FILE

# move output file to output directory
F=${SEG_SUFFIX::-8}

mv $WORKING_DIR/$SAMPLE.$F.fused_dec.bed $OUT_DIR

echo 
echo "-------------------------------"
echo 


echo "Intersecting fused segments with gene TESs..."
# Run bedtools intersect to find fused_dec segments that overlap a TES. A_file = TES_annotation so that each row in the output cooresponds to a gene.

bedtools intersect -s -wao -a $TES_ANNOT -b $OUT_DIR/$SAMPLE.$F.fused_dec.bed > $OUT_DIR/$SAMPLE.$F.fused_dec.TESintersect.bed


echo 
echo "-------------------------------"
echo 


echo "Performing initial assignment and filtering of RTsegs..."
# Run python script that performs filtering and refining of readthrough segments. Inputs include a .bed file containing RT_segments (fused_dec
# segments that intersect a TES) a file that contains the RPKM information for the sample () and the sample name.
# The output is a .filtered.bed file that follows the naming of the input file (defined in python main func). More information can be found within python script.

conda run -p $CONDA_ENV python $ACTIONS_DIR/filter_and_refine_rt_segments_v2_ENCbasic.py \
$OUT_DIR/$SAMPLE.$F.fused_dec.TESintersect.bed \
$COUNTS_0h \
$RPKM_0h \
$SAMPLE \
$BRU_TP


echo 
echo "-------------------------------"
echo 

# ***This was where a placeholder column was added to prevent errors in downstream step... determine if still necessary and/or better way to fix?

echo "Intersecting RTsegs with genes..."
# Use bedtools to create the overlapping gene file for rt_segment evaluation.

IN_FILE0=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.filtered.bed
OUT_FILE0=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.geneOL.bed

bedtools intersect -s -wao -a $IN_FILE0 -b $GENE_ANNOT > $OUT_FILE0

awk 'BEGIN{ FS = OFS = "\t" } { print $0, "X" }' $OUT_FILE0 > tmp && mv tmp $OUT_FILE0


echo 
echo "-------------------------------"
echo 


echo "Calculating initial RTseg coverage..."

STRANDED=True
IN_BED0=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.geneOL.bed
OUT_BED0=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.bed

. $ACTIONS_DIR/feature_coverage_count_bed.sh $SAMPLE $IN_BED0 $OUT_BED0


echo 
echo "-------------------------------"
echo 


echo "Performing initial classification and obtaining regions for RTsegs requiring reevaluation..."
# Run python script that determines the segments that can be reevaluated and outputs the regions needed for evaluation (1kb into start of RT_seg, 1kb
# before downstream TSS, 1kb after downstream TSS).

if [[ $RPKM_6h == "NONE" ]]; then
	# run script using 0h file in place of 6h file
	conda run -p $CONDA_ENV python $ACTIONS_DIR/get_rt_eval_regions_v3_ENCbasic_no6h.py $OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.bed $SAMPLE --exon_expression_file $RPKM_0h
else
	conda run -p $CONDA_ENV python $ACTIONS_DIR/get_rt_eval_regions_v3_ENCbasic.py $OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.bed $SAMPLE --exon_expression_file $RPKM_6h
fi


echo 
echo "-------------------------------"
echo 

# awk 'BEGIN{ FS = OFS = "\t" } { print $0, "X" }' $OUT_FILE0 > tmp && mv tmp $OUT_FILE0


echo "Calculating coverage in reevaluation regions..." 

IN_BED1=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.starts.bed
OUT_BED1=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.startsRPKM.bed

. $ACTIONS_DIR/feature_coverage_count_bed.sh $SAMPLE $IN_BED1 $OUT_BED1

IN_BED2=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.ends.bed
OUT_BED2=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.endsRPKM.bed

. $ACTIONS_DIR/feature_coverage_count_bed.sh $SAMPLE $IN_BED2 $OUT_BED2

IN_BED3=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.genes.bed
OUT_BED3=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.genesRPKM.bed

. $ACTIONS_DIR/feature_coverage_count_bed.sh $SAMPLE $IN_BED3 $OUT_BED3


echo 
echo "-------------------------------"
echo 


echo "Reevaluating ambiguous RTsegs..."
# Runs the python script that evaluates these segments and reassigns RT_seg coordinates.

conda run -p $CONDA_ENV python $ACTIONS_DIR/evaluate_ambiguous_segs_v2.py \
$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.startsRPKM.bed \
$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.endsRPKM.bed \
$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.genesRPKM.bed \
$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.noeval.bed \
$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.eval.bed


echo 
echo "-------------------------------"
echo 

# ***This was where a placeholder column was added to prevent errors in downstream step... determine if still necessary and/or better way to fix?

echo "Intersecting final RTsegs with genes..."
# Use bedtools to create the overlapping gene file for rt_segment evaluation.

IN_FILE1=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixed.bed
OUT_FILE1=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixedOL.bed

bedtools intersect -s -wao -a $IN_FILE1 -b $GENE_ANNOT > $OUT_FILE1

awk 'BEGIN{ FS = OFS = "\t" } { print $0, "X" }' $OUT_FILE1 > tmp && mv tmp $OUT_FILE1


echo 
echo "-------------------------------"
echo 

# ***need to recreate this count bed script with updated workflow

echo "Calculating final RTseg coverage..."

IN_BED4=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixedOL.bed
OUT_BED4=$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixedRPKM.bed
 
. $ACTIONS_DIR/feature_coverage_count_bed.sh $SAMPLE $IN_BED4 $OUT_BED4


echo 
echo "-------------------------------"
echo 


echo "Finding nearest downstream genes and genes overlapping RTsegs on opposite strand..."
# Use bedtools to find RT-segment gene overlaps on the opposite strand and to identify the
# distance of a RT segment to the nearest downstream gene on the same strand for classification.

# reverse overlaps
bedtools intersect -S -wao -a $OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixedRPKM.bed -b $GENE_ANNOT > $OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.reverseOL.bed

# get closest ds genes
bedtools closest -s -D a -iu -a $OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixedRPKM.bed -b $GENE_ANNOT > $OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.closestDS.bed


echo 
echo "-------------------------------"
echo 


echo "Performing final RTseg classification..."
# Runs the python script that performs the final classification of all RT_segments and formats the final output file.

if [[ $RPKM_6h == "NONE" ]]; then
	conda run -p $CONDA_ENV python $ACTIONS_DIR/final_filter_and_classification_v2_ENCbasic_no6h.py \
	$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixedRPKM.bed \
	$SAMPLE \
	$RPKM_0h \
	$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.closestDS.bed \
	$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.reverseOL.bed \
	--exon_expression_file $RPKM_0h
else
	conda run -p $CONDA_ENV python $ACTIONS_DIR/final_filter_and_classification_v2_ENCbasic.py \
	$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.fixedRPKM.bed \
	$SAMPLE \
	$RPKM_0h \
	$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.closestDS.bed \
	$OUT_DIR/$SAMPLE.RTsegments.TESintersect.segmentRPKM.reverseOL.bed \
	--exon_expression_file $RPKM_6h
fi


echo 
echo "-------------------------------"
echo 


echo "RTseg identification and classification complete!"



